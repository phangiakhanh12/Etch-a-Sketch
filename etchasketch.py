'''
This etchasketch.py is the Python file, which runs in the computer, to receive values
generated by the left pot and the right pot. Then, create and order the turtle to
move to different points with the x-coordinate and y-coordinate created by
the aforementioned two pots in a 2D plane to draw lines. In addition, this program
also uses a button and a led to signify the turtle when to move its penup or pendown
to easily draw letters and shapes.
'''
import turtle
from receiver import Receiver
import random
turtle.colormode(255) #In the turtle module, use this function to import all of the variations of the RGB color, which is 255.
def pot2px(potvalue, min_px_val, max_px_val):
    """
    maps a potentiometer value to a pixel value, as a float.
    (pixel values are typically ints, but Turtle's goto method
    can take floats)
    Potentiometer values fall between 0 and 65535.
    * When the potentiometer value is 0, the function should return min_px_val.
    * When the potentiometer value is 65535, the function should return max_px_val.
    * If the potentiometer value is somewhere between 0 and 65535, 
    the function should return an float pixel value that is proportionally 
    between min_px_val and max_px_val

    For example:
    * pot2px(0, -400, 400) should return -400.0 because the potentiometer is at its minimum.
    * pot2px(65535, -400, 400) should return 400.0, because the potentiometer is at its maximum.
    * pot2px(32768, -400, 400) should return a value very close to (within 1.0 px) of 0.0, 
        because 32768 is roughly halfway between 0 and 65535 (rounding up), 
        so it maps close to the midpoint between -400 and 400.

    Inputs:
        * potvalue: the potentiometer reading (int)
        * min_px_val: the minimum pixel value (int)
        * max_px_val: the max pixel value (int)

    Outputs:
        * the pixel value corresponding to the pot reading (float)

    Assumptions: You may assume that potvalue is between 0 and 65535 inclusive.
    You may assume that max_px_val > min_pix_val, and that the difference between
    them is <= 2000, but you should not assume that they are symmetric, or 
    the specific values specified in the test cases (e.g. 
    your function should work for cases other than -400, 400).

    Hint: the test file is provided in testpot2px.py. There is some 
    tolerance there--your outputs will pass if they 
    fall within +/- 1 px of the expected values in the test file.
    """
    scale = (max_px_val - min_px_val) / 65535
    # scale is the difference between the max and min pixel values divided by 65535
    return min_px_val + potvalue * scale


def setup_turtle(screen_width, screen_height): # Setup the turtle and the screen size
    """
    creates a turtle object, sets the screen size, and returns the turtle
    Inputs: screen_width--the width of the screen in pixels
            screen_height--the height of the screen in pixels
    Outputs:
        a turtle object, with the screen setup to screen_width and screen_height
    """
    timmy = turtle.Turtle() # create a turtle object
    timmy.color("green") # set the color of the turtle to green
    screen = timmy.getscreen()
    screen.setup(screen_width, screen_height) # set the screen size
    return timmy

def generate_all_colors(turtle_name):
    '''
    This function is created to generate all of the possible colors, following
    the RGB rule, to change the color of the turtle. First, turtle_name.colormode(255)
    imports all of the variations of color. Then, turtle_name.color(R, G, B) is passed in
    three arguments of random.randint(0,255) to generate a random integer number between
    that interval. Finally, the color of the turtle is changed.
    '''
    turtle_name.color(random.randint(0,255), random.randint(0,255), random.randint(0,255))

def main():
    """
    The main function basically uses all of the functions above to realize the purpose of
    the program. First, create a screen with the function setup_turtle. Then, initialize an object of the
    Receiver class to receive information of the pots, button, and led from the controls.py. Afterwards, save the list
    created by the rec.read_values(3) to a variable called values. Moving on, use the pot2px function 2 times to
    generate x-coordinate and y-coordinate acoording to the screen size. Then, check the button state. If
    the button is being pressed, the turtle will put the pendown and change its color due to the
    generate_all_colors function. Otherwise, it just simply put the pen up and do not draw.
    Finally, use the coordinates generated before to order the turtle to go to its destination by the
    method timmy.goto(x_coordinate, y_coordinate).
    """
    timmy = setup_turtle(800, 800) # set the screen size to 800x800
    rec = Receiver("COM4") # initialze the rec object from class Receiver to receive information from controls.py
    while True:
       values = rec.read_values(3) # read the values from the Pico
       x_coordinate = pot2px(values[0], -400, 400) # store the x-coordinate generated by the left_pot
       y_coordinate = pot2px(values[1], -400, 400) # store the y-coordinate generated by the right_pot
       if values[2]:
          timmy.pendown() # put the pen down
          generate_all_colors(timmy)
       else:
          timmy.penup() # put the pen up
       timmy.goto(x_coordinate, y_coordinate) # move the turtle to the x and y coordinates


if __name__=='__main__':
    main()